// Generated by CoffeeScript 1.3.3
(function() {
  var Watch;

  Watch = {
    prepareWatch: function(model, callback) {
      var attribute, bind, trigger, unbind, _i, _len, _ref;
      bind = function(record, prop, handler) {
        var getter, setter;
        if (record[prop] && Object.hasOwnProperty(record[prop])) {
          record["_" + prop] = record[prop];
        }
        getter = function() {
          return record["_" + prop];
        };
        setter = function(value) {
          var previous;
          if (record["_" + prop] === value) {
            return;
          }
          if (record["_" + prop] && value && typeof record["_" + prop] === 'object' && typeof value === 'object' && Object.getPrototypeOf(record["_" + prop]) === Object.getPrototypeOf(value)) {
            return;
          }
          previous = record["_" + prop];
          record["_" + prop] = value;
          return handler.call(record, prop, record["_" + prop], value);
        };
        if (delete record[prop]) {
          if (Object.defineProperty) {
            return Object.defineProperty(record, prop, {
              get: getter,
              set: setter,
              enumerable: true,
              configurable: true
            });
          } else if (Object.prototype.__defineGetter__ && Object.prototype.__defineSetter__) {
            Object.prototype.__defineGetter__.call(record, prop, getter);
            return Object.prototype.__defineSetter__.call(record, prop, setter);
          }
        }
      };
      unbind = function(record, prop) {
        var value;
        value = record[prop];
        delete this[prop];
        return record[prop] = value;
      };
      trigger = function(prop, previous, current) {
        if (callback) {
          return callback("update[" + prop + "]", current, prop, previous);
        } else {
          return this.trigger("update[" + prop + "]", current, prop, previous);
        }
      };
      if (model) {
        for (attribute in model) {
          bind(model, attribute, trigger);
        }
      } else {
        _ref = this.constructor.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attribute = _ref[_i];
          bind(this, attribute, trigger);
        }
        this.bind("destroy", function() {
          var _j, _len1, _ref1, _results;
          _ref1 = this.constructor.attributes;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            attribute = _ref1[_j];
            _results.push(unbind(this, attribute));
          }
          return _results;
        });
      }
      this.watchEnabled = true;
      return this;
    }
  };

  if (Spine.Activator) {
    Watch.activators = ["prepareWatch"];
  }

  this.Spine.Watch = Watch;

  this.Spine.Model.prototype.clone = function() {
    var o;
    o = Object.create(this);
    return o.prepareWatch();
  };

}).call(this);
